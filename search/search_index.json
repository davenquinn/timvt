{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TiMVT","text":"<p> <p>A lightweight PostGIS based dynamic vector tile server.</p> </p> <p> </p> <p>Documentation: developmentseed.org/timvt/</p> <p>Source Code: developmentseed/timvt</p> <p> This project is on pause while we focus on <code>developmentseed/tipg</code> </p> <p>ref: developmentseed/timvt?96</p> <p><code>TiMVT</code>, pronounced tee-MVT, is a python package which helps creating lightweight Vector Tiles service from PostGIS Database.</p> <p>Built on top of the modern and fast FastAPI framework, timvt is written in Python using async/await asynchronous code to improve the performances and handle heavy loads.</p> <p><code>TiMVT</code> is mostly inspired from the awesome urbica/martin and CrunchyData/pg_tileserv projects.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Multiple TileMatrixSets via morecantile. Default is set to WebMercatorQuad which is the usual Web Mercator projection used in most of Wep Map libraries.)</li> <li>Built with FastAPI</li> <li>Table and Function layers</li> <li>Async API using asyncpg</li> </ul>"},{"location":"#install","title":"Install","text":"<p>Install <code>TiMVT</code> from pypi <pre><code># update pip (optional)\npython -m pip install pip -U\n\n# install timvt\npython -m pip install timvt\n</code></pre></p> <p>or install from source:</p> <pre><code>$ git clone https://github.com/developmentseed/timvt.git\n$ cd timvt\n$ python -m pip install -e .\n</code></pre>"},{"location":"#postgispostgres","title":"PostGIS/Postgres","text":"<p><code>TiMVT</code> rely mostly on <code>ST_AsMVT</code> function and will need PostGIS &gt;= 2.5.</p> <p>If you want more info about <code>ST_AsMVT</code> function or on the subject of creating Vector Tile from PostGIS, please read this great article from Paul Ramsey: info.crunchydata.com/blog/dynamic-vector-tiles-from-postgis</p>"},{"location":"#configuration","title":"Configuration","text":"<p>To be able to create Vector Tile, the application will need access to the PostGIS database. <code>TiMVT</code> uses pydantic's configuration pattern which make use of environment variable and/or <code>.env</code> file to pass variable to the application.</p> <p>Example of <code>.env</code> file can be found in .env.example <pre><code>POSTGRES_USER=username\nPOSTGRES_PASS=password\nPOSTGRES_DBNAME=postgis\nPOSTGRES_HOST=0.0.0.0\nPOSTGRES_PORT=5432\n\n# Or you can also define the DATABASE_URL directly\nDATABASE_URL=postgresql://username:password@0.0.0.0:5432/postgis\n</code></pre></p>"},{"location":"#minimal-application","title":"Minimal Application","text":"<pre><code>from timvt.db import close_db_connection, connect_to_db\nfrom timvt.factory import VectorTilerFactory\nfrom timvt.layer import FunctionRegistry\nfrom fastapi import FastAPI, Request\n\n# Create Application.\napp = FastAPI()\n\n# Add Function registry to the application state\napp.state.timvt_function_catalog = FunctionRegistry()\n\n# Register Start/Stop application event handler to setup/stop the database connection\n# and populate `app.state.table_catalog`\n@app.on_event(\"startup\")\nasync def startup_event():\n\"\"\"Application startup: register the database connection and create table list.\"\"\"\n    await connect_to_db(app)\n\n\n@app.on_event(\"shutdown\")\nasync def shutdown_event():\n\"\"\"Application shutdown: de-register the database connection.\"\"\"\n    await close_db_connection(app)\n\n# Register endpoints.\nmvt_tiler = VectorTilerFactory(\n    with_tables_metadata=True,\n    with_functions_metadata=True,  # add Functions metadata endpoints (/functions.json, /{function_name}.json)\n    with_viewer=True,\n)\napp.include_router(mvt_tiler.router, tags=[\"Tiles\"])\n</code></pre>"},{"location":"#default-application","title":"Default Application","text":"<p>While we encourage users to write their own application using <code>TiMVT</code> package, we also provide a default <code>production ready</code> application:</p> <pre><code># Install timvt dependencies and Uvicorn (a lightning-fast ASGI server)\n$ pip install timvt 'uvicorn[standard]&gt;=0.12.0,&lt;0.14.0'\n\n# Set Database URL environment variable so TiMVT can access it\n$ export DATABASE_URL=postgresql://username:password@0.0.0.0:5432/postgis\n\n# Launch Demo Application\n$ uvicorn timvt.main:app --reload\n</code></pre> <p>You can also use the official docker image</p> <pre><code>$ docker run \\\n    -p 8081:8081 \\\n    -e PORT=8081 \\\n    -e DATABASE_URL=postgresql://username:password@0.0.0.0:5432/postgis \\\n    ghcr.io/developmentseed/timvt:latest\n</code></pre> <p><code>:endpoint:/docs</code></p> <p></p>"},{"location":"#contribution-development","title":"Contribution &amp; Development","text":"<p>See CONTRIBUTING.md</p>"},{"location":"#license","title":"License","text":"<p>See LICENSE</p>"},{"location":"#authors","title":"Authors","text":"<p>Created by Development Seed</p>"},{"location":"#changes","title":"Changes","text":"<p>See CHANGES.md.</p>"},{"location":"contributing/","title":"Development - Contributing","text":"<p>Issues and pull requests are more than welcome: github.com/developmentseed/timvt/issues</p> <p>dev install</p> <pre><code>$ git clone https://github.com/developmentseed/timvt.git\n$ cd timvt\n$ pip install -e .[\"test,dev\"]\n</code></pre> <p>You can then run the tests with the following command:</p> <pre><code>python -m pytest --cov timvt --cov-report term-missing\n</code></pre> <p>pre-commit</p> <p>This repo is set to use <code>pre-commit</code> to run isort, flake8, pydocstring, black (\"uncompromising Python code formatter\") and mypy when committing new code.</p> <pre><code>$ pre-commit install\n</code></pre>"},{"location":"contributing/#docs","title":"Docs","text":"<pre><code>$ git clone https://github.com/developmentseed/timvt.git\n$ cd timvt\n$ pip install -e .[\"docs\"]\n</code></pre> <p>Hot-reloading docs:</p> <pre><code>$ mkdocs serve\n</code></pre> <p>To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.):</p> <pre><code>$ mkdocs gh-deploy\n</code></pre>"},{"location":"function_layers/","title":"Function Layers","text":"<p>As for <code>pg_tileserv</code> and <code>martin</code>, TiMVT can support <code>Function</code> layer/source.</p> <p><code>Functions</code> are database functions which can be used to create vector tiles and must of the form:</p> <pre><code>CREATE FUNCTION name(\n-- bounding box\nxmin float,\nymin float,\nxmax float,\nymax float,\n-- EPSG (SRID) of the bounding box coordinates\nepsg integer,\n-- additional parameters\nquery_params json\n)\nRETURNS bytea\n</code></pre> Argument Type Description xmin float left coordinate ymin float bottom coordinate xmax float right coordinate ymax float top coordinate epsg float bounding box EPSG (SRID) number query_params json Additional Query string parameters"},{"location":"function_layers/#query-parameters","title":"Query Parameters","text":"<p><code>TiMVT</code> will forward all query parameters to the function as a JSON object. It's on the user to properly parse the JSON object in the database function.</p> <pre><code>url = \"https://endpoint/tiles/my_function/1/1/1?value1=2&amp;value2=3\"\nquery_params = '{\"value1\": \"2\", \"value2\": \"3\"}'\n\nurl = \"https://endpoint/tiles/my_function/1/1/1?v=2&amp;v=3\"\nquery_params = '{\"v\": [\"2\", \"3\"]}'\n</code></pre> <p>Important</p> <p><code>Functions</code> are not hard coded into the database but dynamically registered/unregistered by the application on each tile call.</p>"},{"location":"function_layers/#minimal-application","title":"Minimal Application","text":"<pre><code>from timvt.db import close_db_connection, connect_to_db\nfrom timvt.factory import VectorTilerFactory\nfrom timvt.layer import FunctionRegistry\nfrom timvt.layer import Function\n\nfrom fastapi import FastAPI, Request\n\n\n# Create FastAPI Application.\napp = FastAPI()\n\n# Add Function registery to the application state\napp.state.timvt_function_catalog = FunctionRegistry()\n\n# Register Start/Stop application event handler to setup/stop the database connection\n# and populate `app.state.table_catalog`\n@app.on_event(\"startup\")\nasync def startup_event():\n\"\"\"Application startup: register the database connection and create table list.\"\"\"\n    await connect_to_db(app)\n\n@app.on_event(\"shutdown\")\nasync def shutdown_event():\n\"\"\"Application shutdown: de-register the database connection.\"\"\"\n    await close_db_connection(app)\n\n# Register Function to the application internal registry\napp.state.timvt_function_catalog.register(\n    Function.from_file(\n        id=\"squares\",  # By default TiMVT will call a function call `squares`\n        infile=\"my_sql_file.sql\",  # PATH TO SQL FILE\n    )\n)\n\n# Register endpoints\nmvt_tiler = VectorTilerFactory(\n    with_tables_metadata=True,\n    with_functions_metadata=True,  # add Functions metadata endpoints (/functions.json, /{function_name}.json)\n    with_viewer=True,\n)\napp.include_router(mvt_tiler.router)\n</code></pre> <p>Important</p> <p>A function <code>Registry</code> object (timvt.layer.FunctionRegistry) should be initialized and stored within the application state. TiMVT assumes <code>app.state.timvt_function_catalog</code> is where the registry is.</p>"},{"location":"function_layers/#function-options","title":"Function Options","text":"<p>When registering a <code>Function</code>, the user can set different options:</p> <ul> <li>id (required): name of the Layer which will then be used in the endpoint routes.</li> <li>sql (required): SQL code</li> <li>function_name: name of the SQL function within the SQL code. Defaults to <code>id</code>.</li> <li>bounds: Bounding Box for the area of usage (this is for <code>documentation</code> only).</li> <li>minzoom: minimum zoom level (this is for <code>documentation</code> only).</li> <li>maxzoom: maximum zoom level (this is for <code>documentation</code> only).</li> <li>options: List of options available per function (this is for <code>documentation</code> only).</li> </ul> <pre><code>from timvt.layer import Function\n\n\n# Function with Options\nFunction(\n    id=\"squares2\",\n    sql=\"\"\"\n        CREATE FUNCTION squares_but_not_squares(\n            xmin float,\n            ymin float,\n            xmax float,\n            ymax float,\n            epsg integer,\n            query_params json\n        )\n        RETURNS bytea AS $$\n        ...\n    \"\"\",\n    function_name=\"squares_but_not_squares\",  # This allows to call a specific function within the SQL code\n    bounds=[0.0, 0.0, 180.0, 90.0],  # overwrite default bounds\n    minzoom=9,  # overwrite default minzoom\n    maxzoom=24,  # overwrite default maxzoom\n    options={  # Provide arguments information for documentation\n        {\"name\": \"depth\", \"default\": 2}\n    }\n)\n\n# Using `from_file` class method\nFunction.from_file(\n    id=\"squares2\",\n    infile=\"directory/my_sql_file.sql\",  # PATH TO SQL FILE\n    function_name=\"squares_but_not_squares\",  # This allows to call a specific function within the SQL code\n    bounds=[0.0, 0.0, 180.0, 90.0],  # overwrite default bounds\n    minzoom=9,  # overwrite default minzoom\n    maxzoom=24,  # overwrite default maxzoom\n    options={  # Provide arguments information for documentation\n        {\"name\": \"depth\", \"default\": 2}\n    }\n)\n</code></pre>"},{"location":"function_layers/#function-layer-examples","title":"Function Layer Examples","text":""},{"location":"function_layers/#dynamic-geometry-example","title":"Dynamic Geometry Example","text":"<p>Goal: Sub-divide input BBOX in smaller squares.</p> <pre><code>CREATE OR REPLACE FUNCTION squares(\n-- mandatory parameters\nxmin float,\nymin float,\nxmax float,\nymax float,\nepsg integer,\n-- additional parameters\nquery_params json\n)\nRETURNS bytea AS $$\nDECLARE\nresult bytea;\nsq_width float;\nbbox_xmin float;\nbbox_ymin float;\nbounds geometry;\ndepth integer;\nBEGIN\n-- Find the bbox bounds\nbounds := ST_MakeEnvelope(xmin, ymin, xmax, ymax, epsg);\n\n-- Find the bottom corner of the bounds\nbbox_xmin := ST_XMin(bounds);\nbbox_ymin := ST_YMin(bounds);\n\n-- Get Depth from the query_params object\ndepth := coalesce((query_params -&gt;&gt; 'depth')::int, 2);\n\n-- We want bbox divided up into depth*depth squares per bbox,\n-- so what is the width of a square?\nsq_width := (ST_XMax(bounds) - ST_XMin(bounds)) / depth;\n\nWITH mvtgeom AS (\nSELECT\n-- Fill in the bbox with all the squares\nST_AsMVTGeom(\nST_SetSRID(\nST_MakeEnvelope(\nbbox_xmin + sq_width * (a - 1),\nbbox_ymin + sq_width * (b - 1),\nbbox_xmin + sq_width * a,\nbbox_ymin + sq_width * b\n),\nepsg\n),\nbounds\n)\n\n-- Drive the square generator with a two-dimensional\n-- generate_series setup\nFROM generate_series(1, depth) a, generate_series(1, depth) b\n)\nSELECT ST_AsMVT(mvtgeom.*, 'default')\n\n-- Put the query result into the result variale.\nINTO result FROM mvtgeom;\n\n-- Return the answer\nRETURN result;\nEND;\n$$\nLANGUAGE 'plpgsql'\nIMMUTABLE -- Same inputs always give same outputs\nSTRICT -- Null input gets null output\nPARALLEL SAFE;\n</code></pre>"},{"location":"function_layers/#extending-the-function-layer","title":"Extending the Function layer","text":"<p>As mentioned early, <code>Function</code> takes bounding box and EPSG number as input to support multiple TileMatrixSet. If you only want to support one <code>pre-defined</code> TMS (e.g <code>WebMercator</code>) you could have functions taking <code>X,Y,Z</code> inputs:</p> <p>Example of XYZ function: <pre><code>CREATE OR REPLACE FUNCTION xyz(\nz integer,\nx integer,\ny integer,\nquery_params json\n)\nRETURNS bytea\nAS $$\nDECLARE\ntable_name text;\nresult bytea;\nBEGIN\ntable_name := query_params -&gt;&gt; 'table';\n\nWITH\nbounds AS (\nSELECT ST_TileEnvelope(z, x, y) AS geom\n),\nmvtgeom AS (\nSELECT ST_AsMVTGeom(ST_Transform(t.geom, 3857), bounds.geom) AS geom, t.name\nFROM table_name t, bounds\nWHERE ST_Intersects(t.geom, ST_Transform(bounds.geom, 4326))\n)\nSELECT ST_AsMVT(mvtgeom, table_name)\nINTO result\nFROM mvtgeom;\n\nRETURN result;\nEND;\n$$\nLANGUAGE 'plpgsql'\nSTABLE\nPARALLEL SAFE;\n</code></pre></p> <p>In order to support those function, you'll need to <code>extend</code> the <code>Funcion</code> class:</p> <pre><code># custom.py\nfrom typing import Any\nimport morecantile\nfrom buildpg import asyncpg\n\nfrom timvt import layer\n\nclass Function(layer.Function):\n    \"Custom Function Layer: SQL function takes xyz input.\"\"\"\n\n    async def get_tile(\n        self,\n        pool: asyncpg.BuildPgPool,\n        tile: morecantile.Tile,\n        tms: morecantile.TileMatrixSet,  # tms won't be used here\n        **kwargs: Any,\n    ):\n\"\"\"Custom Get Tile method.\"\"\"\n\n        async with pool.acquire() as conn:\n            transaction = conn.transaction()\n            await transaction.start()\n            await conn.execute(self.sql)\n\n            sql_query = clauses.Select(\n                Func(\n                    self.function_name,\n                    \":x\",\n                    \":y\",\n                    \":z\",\n                    \":query_params\",\n                ),\n            )\n            q, p = render(\n                str(sql_query),\n                x=tile.x,\n                y=tile.y,\n                z=tile.z,\n                query_params=json.dumps(kwargs),\n            )\n\n            # execute the query\n            content = await conn.fetchval(q, *p)\n\n            # rollback\n            await transaction.rollback()\n\n        return content\n</code></pre>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#080a3-2023-03-14","title":"0.8.0a3 (2023-03-14)","text":"<ul> <li>fix factories <code>url_for</code> type (for starlette &gt;=0.26)</li> </ul>"},{"location":"release-notes/#080a2-2022-12-14","title":"0.8.0a2 (2022-12-14)","text":"<ul> <li>replace <code>VectorTilerFactory.tms_dependency</code> attribute by <code>TilerFactory.supported_tms</code>. This attribute gets a <code>morecantile.defaults.TileMatrixSets</code> store and will create the tms dependencies dynamically</li> <li>replace <code>TMSFactory.tms_dependency</code> attribute by <code>TMSFactory.supported_tms</code>. This attribute gets a <code>morecantile.defaults.TileMatrixSets</code> store and will create the tms dependencies dynamically</li> <li>add <code>default_tms</code> in <code>VectorTilerFactory</code> to set the default TMS identifier supported by the tiler (e.g <code>WebMercatorQuad</code>)</li> </ul>"},{"location":"release-notes/#080a1-2022-11-21","title":"0.8.0a1 (2022-11-21)","text":"<ul> <li>update hatch config</li> </ul>"},{"location":"release-notes/#080a0-2022-11-16","title":"0.8.0a0 (2022-11-16)","text":"<ul> <li>remove <code>.pbf</code> extension in tiles endpoints</li> <li>add <code>orjson</code> as an optional dependency (for faster JSON encoding/decoding within the database communication)</li> <li>enable <code>geom</code> query parameter to select the <code>geometry column</code> (defaults to the first one)</li> <li>add FastAPI application <code>exception handler</code> in default app</li> <li>add <code>CacheControlMiddleware</code> middleware</li> <li>enable more options to be forwarded to the <code>asyncpg</code> pool creation</li> <li>add <code>PG_SCHEMAS</code> and <code>PG_TABLES</code> environment variable to specify Postgres schemas and tables</li> <li>add <code>TIMVT_FUNCTIONS_DIRECTORY</code> environment variable to look for function SQL files</li> <li>switch viewer to Maplibre</li> <li>add <code>Point</code> and <code>LineString</code> feature support in viewer</li> <li>Update dockerfiles to python3.10 and postgres14-postgis3.3</li> <li>update FastAPI requirement to &gt;0.87</li> <li>remove endpoint Tags</li> <li>make orjson a default requirement</li> </ul> <p>breaking changes</p> <ul> <li>renamed <code>app.state.function_catalog</code> to <code>app.state.timvt_function_catalog</code></li> <li>changed <code>timvt.layer.Table</code> format</li> <li><code>table_catalog</code> is now of <code>Dict[str, Dict[str, Any]]</code> type (instead of <code>List[Dict[str, Any]]</code>)</li> <li>renamed <code>timvt.db.table_index</code> to <code>timvt.dbmodel.get_table_index</code></li> <li>default to only view tables within the <code>public</code> schema</li> <li>renamed base exception class to <code>TiMVTError</code></li> <li>remove python 3.7 support</li> </ul>"},{"location":"release-notes/#070-2022-06-09","title":"0.7.0 (2022-06-09)","text":"<ul> <li>update database settings input</li> <li>add <code>default_tms</code> in Layer definition to specify the Min/Max zoom TileMatrixSet</li> <li>update <code>starlette-cramjam</code> requirement</li> </ul> <p>breaking changes</p> <ul> <li>deprecating the use of <code>.pbf</code> in tile's path</li> </ul>"},{"location":"release-notes/#060-2022-04-14","title":"0.6.0 (2022-04-14)","text":"<ul> <li>update <code>morecantile</code> requirement to <code>&gt;3.1,=&lt;4.0</code></li> </ul>"},{"location":"release-notes/#050-2022-04-13","title":"0.5.0 (2022-04-13)","text":"<ul> <li>switch to <code>pyproject.toml</code> and repo cleanup</li> </ul>"},{"location":"release-notes/#041-2022-02-10","title":"0.4.1 (2022-02-10)","text":"<ul> <li>update viewer</li> </ul>"},{"location":"release-notes/#040-2022-02-10","title":"0.4.0 (2022-02-10)","text":"<ul> <li>Refactor Function Registry to be hosted in the application state (`app.state.function_catalog) as the Table catalog.</li> <li>move <code>timvt.function.Registry</code> to <code>timvt.layer.FunctionRegistry</code></li> </ul>"},{"location":"release-notes/#030-2022-02-09","title":"0.3.0 (2022-02-09)","text":"<ul> <li>update settings management from starlette to pydantic and use <code>TIMVT_</code> prefix</li> </ul>"},{"location":"release-notes/#021-2022-01-25","title":"0.2.1 (2022-01-25)","text":"<ul> <li>update FastAPI version requirement to allow <code>&gt;=0.73</code></li> </ul>"},{"location":"release-notes/#020-2022-01-05","title":"0.2.0 (2022-01-05)","text":"<ul> <li>Faster and cleaner SQL code</li> <li>Compare Tile and Table geometries in Table CRS (speedup)</li> <li>Allow non-epsg based TileMatrixSet</li> <li>update morecantile requirement to <code>&gt;=3.0.2</code></li> <li>add <code>geometry_srid</code> in Table metadata</li> <li>refactor <code>Function</code> layers.</li> </ul> <p>breaking changes</p> <ul> <li>Function layer signature change <pre><code>-- before\nCREATE FUNCTION name(\n-- bounding box\nxmin float,\nymin float,\nxmax float,\nymax float,\n-- EPSG (SRID) of the bounding box coordinates\nepsg integer,\n-- additional parameters\nvalue0 int,\nvalue1 int\n)\nRETURNS bytea\n\n-- now\nCREATE FUNCTION name(\n-- bounding box\nxmin float,\nymin float,\nxmax float,\nymax float,\n-- EPSG (SRID) of the bounding box coordinates\nepsg integer,\n-- additional parameters\nquery_params json\n)\nRETURNS bytea\n</code></pre></li> </ul>"},{"location":"release-notes/#010-2021-10-12","title":"0.1.0 (2021-10-12)","text":"<p>Initial release</p>"},{"location":"api/timvt/db/","title":"Module timvt.db","text":"<p>timvt.db: database events.</p>"},{"location":"api/timvt/db/#functions","title":"Functions","text":""},{"location":"api/timvt/db/#close_db_connection","title":"close_db_connection","text":"<pre><code>def close_db_connection(\n    app: fastapi.applications.FastAPI\n) -&gt; None\n</code></pre> <p>Close connection.</p>"},{"location":"api/timvt/db/#con_init","title":"con_init","text":"<pre><code>def con_init(\n    conn\n)\n</code></pre> <p>Use json for json returns.</p>"},{"location":"api/timvt/db/#connect_to_db","title":"connect_to_db","text":"<pre><code>def connect_to_db(\n    app: fastapi.applications.FastAPI,\n    settings: Union[timvt.settings.PostgresSettings, NoneType] = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Connect.</p>"},{"location":"api/timvt/db/#register_table_catalog","title":"register_table_catalog","text":"<pre><code>def register_table_catalog(\n    app: fastapi.applications.FastAPI,\n    **kwargs: Any\n) -&gt; None\n</code></pre> <p>Register Table catalog.</p>"},{"location":"api/timvt/dependencies/","title":"Module timvt.dependencies","text":"<p>TiVTiler.dependencies: endpoint's dependencies.</p>"},{"location":"api/timvt/dependencies/#functions","title":"Functions","text":""},{"location":"api/timvt/dependencies/#layerparams","title":"LayerParams","text":"<pre><code>def LayerParams(\n    request: starlette.requests.Request,\n    layer: str = Path(Ellipsis)\n) -&gt; timvt.layer.Layer\n</code></pre> <p>Return Layer Object.</p>"},{"location":"api/timvt/dependencies/#tileparams","title":"TileParams","text":"<pre><code>def TileParams(\n    z: int = Path(Ellipsis),\n    x: int = Path(Ellipsis),\n    y: int = Path(Ellipsis)\n) -&gt; morecantile.commons.Tile\n</code></pre> <p>Tile parameters.</p>"},{"location":"api/timvt/factory/","title":"Module timvt.factory","text":"<p>timvt.endpoints.factory: router factories.</p>"},{"location":"api/timvt/factory/#variables","title":"Variables","text":"<pre><code>TILE_RESPONSE_PARAMS\n</code></pre> <pre><code>templates\n</code></pre>"},{"location":"api/timvt/factory/#functions","title":"Functions","text":""},{"location":"api/timvt/factory/#queryparams_to_kwargs","title":"queryparams_to_kwargs","text":"<pre><code>def queryparams_to_kwargs(\n    q: starlette.datastructures.QueryParams,\n    ignore_keys: List = []\n) -&gt; Dict\n</code></pre> <p>Convert query params to dict.</p>"},{"location":"api/timvt/factory/#classes","title":"Classes","text":""},{"location":"api/timvt/factory/#tmsfactory","title":"TMSFactory","text":"<pre><code>class TMSFactory(\n    supported_tms: morecantile.defaults.TileMatrixSets = TileMatrixSets(tms={'CanadianNAD83_LCC': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/CanadianNAD83_LCC.json'), 'EuropeanETRS89_LAEAQuad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/EuropeanETRS89_LAEAQuad.json'), 'LINZAntarticaMapTilegrid': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/LINZAntarticaMapTilegrid.json'), 'NZTM2000': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/NZTM2000.json'), 'NZTM2000Quad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/NZTM2000Quad.json'), 'UPSAntarcticWGS84Quad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/UPSAntarcticWGS84Quad.json'), 'UPSArcticWGS84Quad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/UPSArcticWGS84Quad.json'), 'UTM31WGS84Quad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/UTM31WGS84Quad.json'), 'WGS1984Quad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/WGS1984Quad.json'), 'WebMercatorQuad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/WebMercatorQuad.json'), 'WorldCRS84Quad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/WorldCRS84Quad.json'), 'WorldMercatorWGS84Quad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/WorldMercatorWGS84Quad.json')}),\n    router: fastapi.routing.APIRouter = &lt;factory&gt;,\n    router_prefix: str = ''\n)\n</code></pre> <p>TileMatrixSet endpoints Factory.</p>"},{"location":"api/timvt/factory/#class-variables","title":"Class variables","text":"<pre><code>router_prefix\n</code></pre> <pre><code>supported_tms\n</code></pre>"},{"location":"api/timvt/factory/#methods","title":"Methods","text":""},{"location":"api/timvt/factory/#register_routes","title":"register_routes","text":"<pre><code>def register_routes(\n    self\n)\n</code></pre> <p>Register TMS endpoint routes.</p>"},{"location":"api/timvt/factory/#url_for","title":"url_for","text":"<pre><code>def url_for(\n    self,\n    request: starlette.requests.Request,\n    name: str,\n    **path_params: Any\n) -&gt; str\n</code></pre> <p>Return full url (with prefix) for a specific endpoint.</p>"},{"location":"api/timvt/factory/#vectortilerfactory","title":"VectorTilerFactory","text":"<pre><code>class VectorTilerFactory(\n    router: fastapi.routing.APIRouter = &lt;factory&gt;,\n    supported_tms: morecantile.defaults.TileMatrixSets = TileMatrixSets(tms={'CanadianNAD83_LCC': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/CanadianNAD83_LCC.json'), 'EuropeanETRS89_LAEAQuad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/EuropeanETRS89_LAEAQuad.json'), 'LINZAntarticaMapTilegrid': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/LINZAntarticaMapTilegrid.json'), 'NZTM2000': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/NZTM2000.json'), 'NZTM2000Quad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/NZTM2000Quad.json'), 'UPSAntarcticWGS84Quad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/UPSAntarcticWGS84Quad.json'), 'UPSArcticWGS84Quad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/UPSArcticWGS84Quad.json'), 'UTM31WGS84Quad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/UTM31WGS84Quad.json'), 'WGS1984Quad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/WGS1984Quad.json'), 'WebMercatorQuad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/WebMercatorQuad.json'), 'WorldCRS84Quad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/WorldCRS84Quad.json'), 'WorldMercatorWGS84Quad': PosixPath('/opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/morecantile/data/WorldMercatorWGS84Quad.json')}),\n    default_tms: str = 'WebMercatorQuad',\n    layer_dependency: Callable[..., timvt.layer.Layer] = &lt;function LayerParams at 0x7fb2f59d9280&gt;,\n    with_tables_metadata: bool = False,\n    with_functions_metadata: bool = False,\n    with_viewer: bool = False,\n    router_prefix: str = ''\n)\n</code></pre> <p>VectorTiler Factory.</p>"},{"location":"api/timvt/factory/#class-variables_1","title":"Class variables","text":"<pre><code>default_tms\n</code></pre> <pre><code>router_prefix\n</code></pre> <pre><code>supported_tms\n</code></pre> <pre><code>with_functions_metadata\n</code></pre> <pre><code>with_tables_metadata\n</code></pre> <pre><code>with_viewer\n</code></pre>"},{"location":"api/timvt/factory/#methods_1","title":"Methods","text":""},{"location":"api/timvt/factory/#layer_dependency","title":"layer_dependency","text":"<pre><code>def layer_dependency(\n    request: starlette.requests.Request,\n    layer: str = Path(Ellipsis)\n) -&gt; timvt.layer.Layer\n</code></pre> <p>Return Layer Object.</p>"},{"location":"api/timvt/factory/#register_functions_metadata","title":"register_functions_metadata","text":"<pre><code>def register_functions_metadata(\n    self\n)\n</code></pre> <p>Register function metadata endpoints.</p>"},{"location":"api/timvt/factory/#register_routes_1","title":"register_routes","text":"<pre><code>def register_routes(\n    self\n)\n</code></pre> <p>Register Routes.</p>"},{"location":"api/timvt/factory/#register_tables_metadata","title":"register_tables_metadata","text":"<pre><code>def register_tables_metadata(\n    self\n)\n</code></pre> <p>Register metadata endpoints.</p>"},{"location":"api/timvt/factory/#register_tiles","title":"register_tiles","text":"<pre><code>def register_tiles(\n    self\n)\n</code></pre> <p>Register /tiles endpoints.</p>"},{"location":"api/timvt/factory/#register_viewer","title":"register_viewer","text":"<pre><code>def register_viewer(\n    self\n)\n</code></pre> <p>Register viewer.</p>"},{"location":"api/timvt/factory/#url_for_1","title":"url_for","text":"<pre><code>def url_for(\n    self,\n    request: starlette.requests.Request,\n    name: str,\n    **path_params: Any\n) -&gt; str\n</code></pre> <p>Return full url (with prefix) for a specific endpoint.</p>"},{"location":"api/timvt/layer/","title":"Module timvt.layer","text":"<p>timvt models.</p>"},{"location":"api/timvt/layer/#variables","title":"Variables","text":"<pre><code>tile_settings\n</code></pre>"},{"location":"api/timvt/layer/#classes","title":"Classes","text":""},{"location":"api/timvt/layer/#function","title":"Function","text":"<pre><code>class Function(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Function Reader.</p>"},{"location":"api/timvt/layer/#attributes","title":"Attributes","text":"Name Type Description Default id str Layer's name. None bounds list Layer's bounds (left, bottom, right, top). None minzoom int Layer's min zoom level. None maxzoom int Layer's max zoom level. None tileurl str Layer's tiles url. None type str Layer's type. None function_name str Nane of the SQL function to call. Defaults to <code>id</code>. <code>id</code> sql str Valid SQL function which returns Tile data. None options list options available for the SQL function. None"},{"location":"api/timvt/layer/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>timvt.layer.Layer</li> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/timvt/layer/#class-variables","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/timvt/layer/#static-methods","title":"Static methods","text":""},{"location":"api/timvt/layer/#construct","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/timvt/layer/#from_file","title":"from_file","text":"<pre><code>def from_file(\n    id: str,\n    infile: str,\n    **kwargs: Any\n)\n</code></pre> <p>load sql from file</p>"},{"location":"api/timvt/layer/#from_orm","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/layer/#function_name_default","title":"function_name_default","text":"<pre><code>def function_name_default(\n    values\n)\n</code></pre> <p>Define default function's name to be same as id.</p>"},{"location":"api/timvt/layer/#parse_file","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/layer/#parse_obj","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/layer/#parse_raw","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/layer/#schema","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/timvt/layer/#schema_json","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/timvt/layer/#update_forward_refs","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/timvt/layer/#validate","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/layer/#methods","title":"Methods","text":""},{"location":"api/timvt/layer/#copy","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/timvt/layer/#dict","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/timvt/layer/#get_tile","title":"get_tile","text":"<pre><code>def get_tile(\n    self,\n    pool: buildpg.asyncpg.BuildPgPool,\n    tile: morecantile.commons.Tile,\n    tms: morecantile.models.TileMatrixSet,\n    **kwargs: Any\n)\n</code></pre> <p>Get Tile Data.</p>"},{"location":"api/timvt/layer/#json","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/timvt/layer/#functionregistry","title":"FunctionRegistry","text":"<pre><code>class FunctionRegistry(\n\n)\n</code></pre> <p>function registry</p>"},{"location":"api/timvt/layer/#class-variables_1","title":"Class variables","text":"<pre><code>funcs\n</code></pre>"},{"location":"api/timvt/layer/#static-methods_1","title":"Static methods","text":""},{"location":"api/timvt/layer/#get","title":"get","text":"<pre><code>def get(\n    key: str\n)\n</code></pre> <p>lookup function by name</p>"},{"location":"api/timvt/layer/#register","title":"register","text":"<pre><code>def register(\n    *args: timvt.layer.Function\n)\n</code></pre> <p>register function(s)</p>"},{"location":"api/timvt/layer/#values","title":"values","text":"<pre><code>def values(\n\n)\n</code></pre> <p>get all values.</p>"},{"location":"api/timvt/layer/#layer","title":"Layer","text":"<pre><code>class Layer(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Layer's Abstract BaseClass.</p>"},{"location":"api/timvt/layer/#attributes_1","title":"Attributes","text":"Name Type Description Default id str Layer's name. None bounds list Layer's bounds (left, bottom, right, top). None minzoom int Layer's min zoom level. None maxzoom int Layer's max zoom level. None default_tms str TileMatrixSet name for the min/max zoom. None tileurl str Layer's tiles url. None"},{"location":"api/timvt/layer/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/timvt/layer/#descendants","title":"Descendants","text":"<ul> <li>timvt.layer.Table</li> <li>timvt.layer.Function</li> </ul>"},{"location":"api/timvt/layer/#class-variables_2","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/timvt/layer/#static-methods_2","title":"Static methods","text":""},{"location":"api/timvt/layer/#construct_1","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/timvt/layer/#from_orm_1","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/layer/#parse_file_1","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/layer/#parse_obj_1","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/layer/#parse_raw_1","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/layer/#schema_1","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/timvt/layer/#schema_json_1","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/timvt/layer/#update_forward_refs_1","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/timvt/layer/#validate_1","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/layer/#methods_1","title":"Methods","text":""},{"location":"api/timvt/layer/#copy_1","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/timvt/layer/#dict_1","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/timvt/layer/#get_tile_1","title":"get_tile","text":"<pre><code>def get_tile(\n    self,\n    pool: buildpg.asyncpg.BuildPgPool,\n    tile: morecantile.commons.Tile,\n    tms: morecantile.models.TileMatrixSet,\n    **kwargs: Any\n) -&gt; bytes\n</code></pre> <p>Return Tile Data.</p> <p>Parameters:</p> Name Type Description Default pool asyncpg.BuildPgPool AsyncPG database connection pool. None tile morecantile.Tile Tile object with X,Y,Z indices. None tms morecantile.TileMatrixSet Tile Matrix Set. None kwargs any, optiona Optional parameters to forward to the SQL function. None <p>Returns:</p> Type Description bytes Mapbox Vector Tiles."},{"location":"api/timvt/layer/#json_1","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/timvt/layer/#table","title":"Table","text":"<pre><code>class Table(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>Table Reader.</p>"},{"location":"api/timvt/layer/#attributes_2","title":"Attributes","text":"Name Type Description Default id str Layer's name. None bounds list Layer's bounds (left, bottom, right, top). None minzoom int Layer's min zoom level. None maxzoom int Layer's max zoom level. None tileurl str Layer's tiles url. None type str Layer's type. None table str Table's name. None schema str Table's database schema (e.g public). None description str Table's description. None id_column str name of id column None geometry_columns list List of geometry columns. None properties list List of property columns. None"},{"location":"api/timvt/layer/#ancestors-in-mro_2","title":"Ancestors (in MRO)","text":"<ul> <li>timvt.layer.Layer</li> <li>timvt.dbmodel.Table</li> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/timvt/layer/#class-variables_3","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/timvt/layer/#static-methods_3","title":"Static methods","text":""},{"location":"api/timvt/layer/#bounds_default","title":"bounds_default","text":"<pre><code>def bounds_default(\n    values\n)\n</code></pre> <p>Get default bounds from the first geometry columns.</p>"},{"location":"api/timvt/layer/#construct_2","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/timvt/layer/#from_orm_2","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/layer/#parse_file_2","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/layer/#parse_obj_2","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/layer/#parse_raw_2","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/layer/#schema_2","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/timvt/layer/#schema_json_2","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/timvt/layer/#update_forward_refs_2","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/timvt/layer/#validate_2","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/layer/#instance-variables","title":"Instance variables","text":"<pre><code>id_column_info\n</code></pre> <p>Return Column for a unique identifier.</p>"},{"location":"api/timvt/layer/#methods_2","title":"Methods","text":""},{"location":"api/timvt/layer/#columns","title":"columns","text":"<pre><code>def columns(\n    self,\n    properties: Union[List[str], NoneType] = None\n) -&gt; List[str]\n</code></pre> <p>Return table columns optionally filtered to only include columns from properties.</p>"},{"location":"api/timvt/layer/#copy_2","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/timvt/layer/#dict_2","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/timvt/layer/#get_column","title":"get_column","text":"<pre><code>def get_column(\n    self,\n    property_name: str\n) -&gt; Union[timvt.dbmodel.Column, NoneType]\n</code></pre> <p>Return column info.</p>"},{"location":"api/timvt/layer/#get_datetime_column","title":"get_datetime_column","text":"<pre><code>def get_datetime_column(\n    self,\n    name: Union[str, NoneType] = None\n) -&gt; Union[timvt.dbmodel.Column, NoneType]\n</code></pre> <p>Return the Column for either the passed in tstz column or the first tstz column.</p>"},{"location":"api/timvt/layer/#get_geometry_column","title":"get_geometry_column","text":"<pre><code>def get_geometry_column(\n    self,\n    name: Union[str, NoneType] = None\n) -&gt; Union[timvt.dbmodel.GeometryColumn, NoneType]\n</code></pre> <p>Return the name of the first geometry column.</p>"},{"location":"api/timvt/layer/#get_tile_2","title":"get_tile","text":"<pre><code>def get_tile(\n    self,\n    pool: buildpg.asyncpg.BuildPgPool,\n    tile: morecantile.commons.Tile,\n    tms: morecantile.models.TileMatrixSet,\n    **kwargs: Any\n)\n</code></pre> <p>Get Tile Data.</p>"},{"location":"api/timvt/layer/#json_2","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/timvt/settings/","title":"Module timvt.settings","text":"<p>TiMVT config.</p> <p>TiMVT uses pydantic.BaseSettings to either get settings from <code>.env</code> or environment variables see: pydantic-docs.helpmanual.io/usage/settings/</p>"},{"location":"api/timvt/settings/#functions","title":"Functions","text":""},{"location":"api/timvt/settings/#apisettings","title":"ApiSettings","text":"<pre><code>def ApiSettings(\n\n) -&gt; timvt.settings._ApiSettings\n</code></pre> <p>This function returns a cached instance of the APISettings object.</p> <p>Caching is used to prevent re-reading the environment every time the API settings are used in an endpoint. If you want to change an environment variable and reset the cache (e.g., during testing), this can be done using the <code>lru_cache</code> instance method <code>get_api_settings.cache_clear()</code>.</p> <p>From github.com/dmontagu/fastapi-utils/blob/af95ff4a8195caaa9edaa3dbd5b6eeb09691d9c7/fastapi_utils/api_settings.py#L60-L69</p>"},{"location":"api/timvt/settings/#tilesettings","title":"TileSettings","text":"<pre><code>def TileSettings(\n\n) -&gt; timvt.settings._TileSettings\n</code></pre> <p>Cache settings.</p>"},{"location":"api/timvt/settings/#classes","title":"Classes","text":""},{"location":"api/timvt/settings/#postgressettings","title":"PostgresSettings","text":"<pre><code>class PostgresSettings(\n    __pydantic_self__,\n    _env_file: Union[str, os.PathLike, List[Union[str, os.PathLike]], Tuple[Union[str, os.PathLike], ...], NoneType] = '&lt;object object at 0x7fb2f76417f0&gt;',\n    _env_file_encoding: Union[str, NoneType] = None,\n    _env_nested_delimiter: Union[str, NoneType] = None,\n    _secrets_dir: Union[str, os.PathLike, NoneType] = None,\n    **values: Any\n)\n</code></pre> <p>Postgres-specific API settings.</p>"},{"location":"api/timvt/settings/#attributes","title":"Attributes","text":"Name Type Description Default postgres_user None postgres username. None postgres_pass None postgres password. None postgres_host None hostname for the connection. None postgres_port None database port. None postgres_dbname None database name. None"},{"location":"api/timvt/settings/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.env_settings.BaseSettings</li> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/timvt/settings/#class-variables","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/timvt/settings/#static-methods","title":"Static methods","text":""},{"location":"api/timvt/settings/#assemble_db_connection","title":"assemble_db_connection","text":"<pre><code>def assemble_db_connection(\n    v: Union[str, NoneType],\n    values: Dict[str, Any]\n) -&gt; Any\n</code></pre> <p>Validate database config.</p>"},{"location":"api/timvt/settings/#construct","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/timvt/settings/#from_orm","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/settings/#parse_file","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/settings/#parse_obj","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/settings/#parse_raw","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/settings/#schema","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/timvt/settings/#schema_json","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/timvt/settings/#update_forward_refs","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/timvt/settings/#validate","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/settings/#methods","title":"Methods","text":""},{"location":"api/timvt/settings/#copy","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/timvt/settings/#dict","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/timvt/settings/#json","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/timvt/settings/#tableconfig","title":"TableConfig","text":"<pre><code>class TableConfig(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Configuration to add table options with env variables.</p>"},{"location":"api/timvt/settings/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.dict</li> </ul>"},{"location":"api/timvt/settings/#methods_1","title":"Methods","text":""},{"location":"api/timvt/settings/#clear","title":"clear","text":"<pre><code>def clear(\n    ...\n)\n</code></pre> <p>D.clear() -&gt; None.  Remove all items from D.</p>"},{"location":"api/timvt/settings/#copy_1","title":"copy","text":"<pre><code>def copy(\n    ...\n)\n</code></pre> <p>D.copy() -&gt; a shallow copy of D</p>"},{"location":"api/timvt/settings/#fromkeys","title":"fromkeys","text":"<pre><code>def fromkeys(\n    iterable,\n    value=None,\n    /\n)\n</code></pre> <p>Create a new dictionary with keys from iterable and values set to value.</p>"},{"location":"api/timvt/settings/#get","title":"get","text":"<pre><code>def get(\n    self,\n    key,\n    default=None,\n    /\n)\n</code></pre> <p>Return the value for key if key is in the dictionary, else default.</p>"},{"location":"api/timvt/settings/#items","title":"items","text":"<pre><code>def items(\n    ...\n)\n</code></pre> <p>D.items() -&gt; a set-like object providing a view on D's items</p>"},{"location":"api/timvt/settings/#keys","title":"keys","text":"<pre><code>def keys(\n    ...\n)\n</code></pre> <p>D.keys() -&gt; a set-like object providing a view on D's keys</p>"},{"location":"api/timvt/settings/#pop","title":"pop","text":"<pre><code>def pop(\n    ...\n)\n</code></pre> <p>D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.</p> <p>If key is not found, d is returned if given, otherwise KeyError is raised</p>"},{"location":"api/timvt/settings/#popitem","title":"popitem","text":"<pre><code>def popitem(\n    self,\n    /\n)\n</code></pre> <p>Remove and return a (key, value) pair as a 2-tuple.</p> <p>Pairs are returned in LIFO (last-in, first-out) order. Raises KeyError if the dict is empty.</p>"},{"location":"api/timvt/settings/#setdefault","title":"setdefault","text":"<pre><code>def setdefault(\n    self,\n    key,\n    default=None,\n    /\n)\n</code></pre> <p>Insert key with a value of default if key is not in the dictionary.</p> <p>Return the value for key if key is in the dictionary, else default.</p>"},{"location":"api/timvt/settings/#update","title":"update","text":"<pre><code>def update(\n    ...\n)\n</code></pre> <p>D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.</p> <p>If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]</p>"},{"location":"api/timvt/settings/#values","title":"values","text":"<pre><code>def values(\n    ...\n)\n</code></pre> <p>D.values() -&gt; an object providing a view on D's values</p>"},{"location":"api/timvt/settings/#tablesettings","title":"TableSettings","text":"<pre><code>class TableSettings(\n    __pydantic_self__,\n    _env_file: Union[str, os.PathLike, List[Union[str, os.PathLike]], Tuple[Union[str, os.PathLike], ...], NoneType] = '&lt;object object at 0x7fb2f76417f0&gt;',\n    _env_file_encoding: Union[str, NoneType] = None,\n    _env_nested_delimiter: Union[str, NoneType] = None,\n    _secrets_dir: Union[str, os.PathLike, NoneType] = None,\n    **values: Any\n)\n</code></pre> <p>Table configuration settings</p>"},{"location":"api/timvt/settings/#ancestors-in-mro_2","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.env_settings.BaseSettings</li> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/timvt/settings/#class-variables_1","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/timvt/settings/#static-methods_1","title":"Static methods","text":""},{"location":"api/timvt/settings/#construct_1","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/timvt/settings/#from_orm_1","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/settings/#parse_file_1","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/settings/#parse_obj_1","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/settings/#parse_raw_1","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/settings/#schema_1","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/timvt/settings/#schema_json_1","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/timvt/settings/#update_forward_refs_1","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/timvt/settings/#validate_1","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/settings/#methods_2","title":"Methods","text":""},{"location":"api/timvt/settings/#copy_2","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/timvt/settings/#dict_1","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/timvt/settings/#json_1","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/timvt/models/OGC/","title":"Module timvt.models.OGC","text":"<p>timvt.models.OGC: Open GeoSpatial Consortium models.</p>"},{"location":"api/timvt/models/OGC/#classes","title":"Classes","text":""},{"location":"api/timvt/models/OGC/#tilematrixsetlink","title":"TileMatrixSetLink","text":"<pre><code>class TileMatrixSetLink(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>TileMatrixSetLink model.</p> <p>Based on docs.opengeospatial.org/per/19-069.html#_tilematrixsets</p>"},{"location":"api/timvt/models/OGC/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/timvt/models/OGC/#class-variables","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/timvt/models/OGC/#static-methods","title":"Static methods","text":""},{"location":"api/timvt/models/OGC/#construct","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/timvt/models/OGC/#from_orm","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/OGC/#parse_file","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/OGC/#parse_obj","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/OGC/#parse_raw","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/OGC/#schema","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/timvt/models/OGC/#schema_json","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/timvt/models/OGC/#update_forward_refs","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/timvt/models/OGC/#validate","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/OGC/#methods","title":"Methods","text":""},{"location":"api/timvt/models/OGC/#copy","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/timvt/models/OGC/#dict","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/timvt/models/OGC/#json","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/timvt/models/OGC/#tilematrixsetlist","title":"TileMatrixSetList","text":"<pre><code>class TileMatrixSetList(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>TileMatrixSetList model.</p> <p>Based on docs.opengeospatial.org/per/19-069.html#_tilematrixsets</p>"},{"location":"api/timvt/models/OGC/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/timvt/models/OGC/#class-variables_1","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/timvt/models/OGC/#static-methods_1","title":"Static methods","text":""},{"location":"api/timvt/models/OGC/#construct_1","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/timvt/models/OGC/#from_orm_1","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/OGC/#parse_file_1","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/OGC/#parse_obj_1","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/OGC/#parse_raw_1","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/OGC/#schema_1","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/timvt/models/OGC/#schema_json_1","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/timvt/models/OGC/#update_forward_refs_1","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/timvt/models/OGC/#validate_1","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/OGC/#methods_1","title":"Methods","text":""},{"location":"api/timvt/models/OGC/#copy_1","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/timvt/models/OGC/#dict_1","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/timvt/models/OGC/#json_1","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/timvt/models/OGC/#tilematrixsetref","title":"TileMatrixSetRef","text":"<pre><code>class TileMatrixSetRef(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>TileMatrixSetRef model.</p> <p>Based on docs.opengeospatial.org/per/19-069.html#_tilematrixsets</p>"},{"location":"api/timvt/models/OGC/#ancestors-in-mro_2","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/timvt/models/OGC/#class-variables_2","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/timvt/models/OGC/#static-methods_2","title":"Static methods","text":""},{"location":"api/timvt/models/OGC/#construct_2","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/timvt/models/OGC/#from_orm_2","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/OGC/#parse_file_2","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/OGC/#parse_obj_2","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/OGC/#parse_raw_2","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/OGC/#schema_2","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/timvt/models/OGC/#schema_json_2","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/timvt/models/OGC/#update_forward_refs_2","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/timvt/models/OGC/#validate_2","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/OGC/#methods_2","title":"Methods","text":""},{"location":"api/timvt/models/OGC/#copy_2","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/timvt/models/OGC/#dict_2","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/timvt/models/OGC/#json_2","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/timvt/models/mapbox/","title":"Module timvt.models.mapbox","text":"<p>Tilejson response models.</p>"},{"location":"api/timvt/models/mapbox/#classes","title":"Classes","text":""},{"location":"api/timvt/models/mapbox/#schemeenum","title":"SchemeEnum","text":"<pre><code>class SchemeEnum(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>TileJSON scheme choice.</p>"},{"location":"api/timvt/models/mapbox/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.str</li> <li>enum.Enum</li> </ul>"},{"location":"api/timvt/models/mapbox/#class-variables","title":"Class variables","text":"<pre><code>name\n</code></pre> <pre><code>tms\n</code></pre> <pre><code>value\n</code></pre> <pre><code>xyz\n</code></pre>"},{"location":"api/timvt/models/mapbox/#tilejson","title":"TileJSON","text":"<pre><code>class TileJSON(\n    __pydantic_self__,\n    **data: Any\n)\n</code></pre> <p>TileJSON model.</p> <p>Based on github.com/mapbox/tilejson-spec/tree/master/2.2.0</p>"},{"location":"api/timvt/models/mapbox/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>pydantic.main.BaseModel</li> <li>pydantic.utils.Representation</li> </ul>"},{"location":"api/timvt/models/mapbox/#class-variables_1","title":"Class variables","text":"<pre><code>Config\n</code></pre>"},{"location":"api/timvt/models/mapbox/#static-methods","title":"Static methods","text":""},{"location":"api/timvt/models/mapbox/#compute_center","title":"compute_center","text":"<pre><code>def compute_center(\n    values\n)\n</code></pre> <p>Compute center if it does not exist.</p>"},{"location":"api/timvt/models/mapbox/#construct","title":"construct","text":"<pre><code>def construct(\n    _fields_set: Union[ForwardRef('SetStr'), NoneType] = None,\n    **values: Any\n) -&gt; 'Model'\n</code></pre> <p>Creates a new model setting dict and fields_set from trusted or pre-validated data.</p> <p>Default values are respected, but no other validation is performed. Behaves as if <code>Config.extra = 'allow'</code> was set since it adds all passed values</p>"},{"location":"api/timvt/models/mapbox/#from_orm","title":"from_orm","text":"<pre><code>def from_orm(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/mapbox/#parse_file","title":"parse_file","text":"<pre><code>def parse_file(\n    path: Union[str, pathlib.Path],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/mapbox/#parse_obj","title":"parse_obj","text":"<pre><code>def parse_obj(\n    obj: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/mapbox/#parse_raw","title":"parse_raw","text":"<pre><code>def parse_raw(\n    b: Union[str, bytes],\n    *,\n    content_type: 'unicode' = None,\n    encoding: 'unicode' = 'utf8',\n    proto: pydantic.parse.Protocol = None,\n    allow_pickle: bool = False\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/mapbox/#schema","title":"schema","text":"<pre><code>def schema(\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}'\n) -&gt; 'DictStrAny'\n</code></pre>"},{"location":"api/timvt/models/mapbox/#schema_json","title":"schema_json","text":"<pre><code>def schema_json(\n    *,\n    by_alias: bool = True,\n    ref_template: 'unicode' = '#/definitions/{model}',\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre>"},{"location":"api/timvt/models/mapbox/#update_forward_refs","title":"update_forward_refs","text":"<pre><code>def update_forward_refs(\n    **localns: Any\n) -&gt; None\n</code></pre> <p>Try to update ForwardRefs on fields based on this Model, globalns and localns.</p>"},{"location":"api/timvt/models/mapbox/#validate","title":"validate","text":"<pre><code>def validate(\n    value: Any\n) -&gt; 'Model'\n</code></pre>"},{"location":"api/timvt/models/mapbox/#methods","title":"Methods","text":""},{"location":"api/timvt/models/mapbox/#copy","title":"copy","text":"<pre><code>def copy(\n    self: 'Model',\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    update: Union[ForwardRef('DictStrAny'), NoneType] = None,\n    deep: bool = False\n) -&gt; 'Model'\n</code></pre> <p>Duplicate a model, optionally choose which fields to include, exclude and change.</p> <p>Parameters:</p> Name Type Description Default include None fields to include in new model None exclude None fields to exclude from new model, as with values this takes precedence over include None update None values to change/add in the new model. Note: the data is not validated before creatingthe new model: you should trust this data None deep None set to <code>True</code> to make a deep copy of the model None <p>Returns:</p> Type Description None new model instance"},{"location":"api/timvt/models/mapbox/#dict","title":"dict","text":"<pre><code>def dict(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False\n) -&gt; 'DictStrAny'\n</code></pre> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p>"},{"location":"api/timvt/models/mapbox/#json","title":"json","text":"<pre><code>def json(\n    self,\n    *,\n    include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None,\n    by_alias: bool = False,\n    skip_defaults: Union[bool, NoneType] = None,\n    exclude_unset: bool = False,\n    exclude_defaults: bool = False,\n    exclude_none: bool = False,\n    encoder: Union[Callable[[Any], Any], NoneType] = None,\n    models_as_dict: bool = True,\n    **dumps_kwargs: Any\n) -&gt; 'unicode'\n</code></pre> <p>Generate a JSON representation of the model, <code>include</code> and <code>exclude</code> arguments as per <code>dict()</code>.</p> <p><code>encoder</code> is an optional function to supply as <code>default</code> to json.dumps(), other arguments as per <code>json.dumps()</code>.</p>"},{"location":"api/timvt/resources/enums/","title":"Module timvt.resources.enums","text":"<p>timvt.resources.enums.</p>"},{"location":"api/timvt/resources/enums/#classes","title":"Classes","text":""},{"location":"api/timvt/resources/enums/#mimetypes","title":"MimeTypes","text":"<pre><code>class MimeTypes(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Responses MineTypes.</p>"},{"location":"api/timvt/resources/enums/#ancestors-in-mro","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.str</li> <li>enum.Enum</li> </ul>"},{"location":"api/timvt/resources/enums/#class-variables","title":"Class variables","text":"<pre><code>geojson\n</code></pre> <pre><code>html\n</code></pre> <pre><code>json\n</code></pre> <pre><code>mvt\n</code></pre> <pre><code>name\n</code></pre> <pre><code>pbf\n</code></pre> <pre><code>text\n</code></pre> <pre><code>value\n</code></pre> <pre><code>xml\n</code></pre>"},{"location":"api/timvt/resources/enums/#vectortype","title":"VectorType","text":"<pre><code>class VectorType(\n    /,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Vector Type Enums.</p>"},{"location":"api/timvt/resources/enums/#ancestors-in-mro_1","title":"Ancestors (in MRO)","text":"<ul> <li>builtins.str</li> <li>enum.Enum</li> </ul>"},{"location":"api/timvt/resources/enums/#class-variables_1","title":"Class variables","text":"<pre><code>mvt\n</code></pre> <pre><code>name\n</code></pre> <pre><code>pbf\n</code></pre> <pre><code>value\n</code></pre>"}]}